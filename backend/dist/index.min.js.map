{"version":3,"sources":["index.js"],"names":["express","require","cors","bcrypt","jwt","mysql","app","use","json","db","createConnection","host","user","password","database","connect","err","message","req","res","success","console","_req$body","username","email","regeneratorRuntime","async","_context2","prev","next","body","get","query","results","hashedpassword","_context","abrupt","status","error","length","awrap","sent","stop","post","_req$body2","_context4","_context3","compare","password_user","id_user","err2","name_user","email_user","role_user","erreur","id","params","log","gameId","sessionsMap","Map","forEach","row","has","id_session","host_name","set","id_game","id_host","min_players","max_players","playing_time","min_playtime","max_playtime","min_age","starting_date","participant_id","participants","push","participant_name","participant_score","sessions","Array","from","values","_req$body3","result","_req$body5","date_debut","trust_score","put","_req$body6","name_game","year_game","thumbnail","url","concat","affectedRows","search","q","keyword","_ref","_ref2","rows","_context5","execute","_slicedToArray","min_joueurs","max_joueurs","min_duree","temps_jeu","age_min","jeu_id","id_category","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst mysql = require('mysql2');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Connexion à MySQL\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '123456789',\r\n  database: 'projet_bda'\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Erreur de connexion à la base de données :', err.message);\r\n  } else {\r\n    console.log('Connecté à la base de données MySQL');\r\n  }\r\n});\r\n\r\n// Route de base\r\napp.get('/', (req, res) => {\r\n  res.json({ success: true, message: 'Bienvenue sur l’API' });\r\n});\r\n\r\n\r\n// ROUTE LOGIN ETC\r\n\r\napp.post('/register',async(req,res)=>{\r\n  try{\r\n    const { username,email,password} =req.body;\r\n\r\n    db.query('Select * FROM user WHERE email_user = ?',[email],async(err,results)=>{\r\n      if(err) return res.status(500).json({error:err.message});\r\n\r\n      if(results.length >0){\r\n        return res.status(400).json({error:'Cet email est déja utilisé'});\r\n      }\r\n\r\n      const hashedpassword = await bcrypt.hash(password,10);\r\n\r\n      db.query(\r\n        'INSERT INTO user (name_user,email_user,password_user,is_online,role_user) VALUES (?,?,?,?,?)',\r\n        [username,email,hashedpassword,0,\"user\"],\r\n        (err,results) =>{\r\n          if(err) return res.status(500).json({error: err.message});\r\n          res.status(201).json({message:'Compte créé avec succès'})\r\n        }\r\n      );\r\n    });\r\n\r\n  }catch(error){\r\n    res.status(500).json({error:'Erreur lors de la création du compte'})\r\n  }\r\n});\r\n\r\n\r\napp.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Veuillez fournir email et mot de passe.' });\r\n  }\r\n\r\n  db.query('SELECT * FROM user WHERE email_user = ?', [email], async (err, results) => {\r\n    if (err) return res.status(500).json({ error: err.message });\r\n    if (results.length === 0) {\r\n      return res.status(401).json({ error: 'Email ou mot de passe incorrect' });\r\n    }\r\n\r\n    const user = results[0];\r\n\r\n    const valid = await bcrypt.compare(password, user.password_user);\r\n    if (!valid) {\r\n      return res.status(401).json({ error: 'Email ou mot de passe incorrect' });\r\n    }\r\n\r\n    // Mettre à jour is_online\r\n    db.query('UPDATE user SET is_online = 1 WHERE id_user = ?', [user.id_user], (err2) => {\r\n      if (err2) return res.status(500).json({ error: err2.message });\r\n\r\n      res.json({\r\n        message: 'Connexion réussie',\r\n        user: {\r\n          id_user: user.id_user,\r\n          name_user: user.name_user,\r\n          email_user: user.email_user,\r\n          role_user: user.role_user  // <-- ici on ajoute le rôle\r\n        }\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n\r\n// Route sécurisée admin pour récupérer tous les utilisateurs depuis la vue admin_user_view\r\napp.get('/admin/users', (req, res) => {\r\n  // Ici tu peux ajouter une vérification de token/session si tu en utilises\r\n\r\n  const sql = 'SELECT * FROM admin_user_view ORDER BY name_user';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération utilisateurs :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n\r\n\r\n// ROUTE GAMES \r\napp.get('/games', (req, res) => {\r\n  const sql = 'SELECT * FROM game';\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de la récupération des jeux :', err.message);\r\n      return res.status(500).json({ erreur: 'Erreur serveur' });\r\n    }\r\n    res.json(results); // envoie tous les jeux au front\r\n  });\r\n});\r\n\r\napp.get('/game/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  const sql = `\r\n    SELECT\r\n      g.id_game,\r\n      g.name_game,\r\n      g.thumbnail   AS image_url,\r\n      g.url         AS website,\r\n      g.year_game   AS release_date,\r\n      g.is_available,\r\n      g.rank_game,\r\n      g.total_ratings,\r\n      gd.description_game   AS description,\r\n      gd.game_publisher     AS publisher,\r\n      GROUP_CONCAT(DISTINCT c.type_category SEPARATOR ',') AS categories\r\n    FROM Game g\r\n    LEFT JOIN Game_details gd ON g.id_game = gd.id_game\r\n    LEFT JOIN have h         ON g.id_game = h.id_game\r\n    LEFT JOIN Category c     ON h.id_category = c.id_category\r\n    WHERE g.id_game = ?\r\n    GROUP BY\r\n      g.id_game,\r\n      gd.description_game,\r\n      gd.game_publisher\r\n  `;\r\n\r\n  db.query(sql, [id], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur chargement jeu:', err.message);\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    if (results.length === 0) {\r\n      return res.status(404).json({ error: 'Jeu non trouvé' });\r\n    }\r\n    // On renvoie l’objet jeu complet\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\napp.get('/sessions/game/:id', (req, res) => {\r\n  console.log(\"Hehe\");\r\n  const gameId = req.params.id;\r\n  const sql = `\r\n    SELECT \r\n      s.id_session,\r\n      s.id_game,\r\n      s.id_host,\r\n      s.min_players,\r\n      s.max_players,\r\n      s.playing_time,\r\n      s.min_playtime,\r\n      s.max_playtime,\r\n      s.min_age,\r\n      s.starting_date,\r\n      u_host.name_user AS host_name,\r\n      u_part.id_user AS participant_id,\r\n      u_part.name_user AS participant_name,\r\n      u_part.trust_score AS participant_score\r\n    FROM Session s\r\n    JOIN User u_host ON s.id_host = u_host.id_user\r\n    LEFT JOIN participate p ON s.id_session = p.id_session\r\n    LEFT JOIN User u_part ON p.id_user = u_part.id_user\r\n    WHERE s.id_game = ?\r\n    ORDER BY s.id_session;\r\n  `;\r\n\r\n  db.query(sql, [gameId], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de la récupération des sessions :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n\r\n    // Regrouper les résultats par session\r\n    const sessionsMap = new Map();\r\n\r\n    results.forEach(row => {\r\n      if (!sessionsMap.has(row.id_session)) {\r\n        console.log(\"Host Name : \",row.host_name);\r\n        sessionsMap.set(row.id_session, {\r\n          id_session: row.id_session,\r\n          id_game: row.id_game,\r\n          id_host: row.id_host,\r\n          host_name: row.host_name,\r\n          min_players: row.min_players,\r\n          max_players: row.max_players,\r\n          playing_time: row.playing_time,\r\n          min_playtime: row.min_playtime,\r\n          max_playtime: row.max_playtime,\r\n          min_age: row.min_age,\r\n          starting_date: row.starting_date,\r\n          participants: []\r\n        });\r\n      }\r\n      if (row.participant_id) {\r\n        sessionsMap.get(row.id_session).participants.push({\r\n          id_user: row.participant_id,\r\n          name_user: row.participant_name,\r\n          trust_score: row.participant_score\r\n        });\r\n      }\r\n    });\r\n\r\n    // Convertir map en tableau\r\n    const sessions = Array.from(sessionsMap.values());\r\n\r\n    res.json(sessions);\r\n  });\r\n});\r\n\r\napp.post('/sessions/join', (req, res) => {\r\n  const { id_session, id_user } = req.body;\r\n\r\n  if (!id_session || !id_user) {\r\n    return res.status(400).json({ error: 'id_session et id_user sont requis' });\r\n  }\r\n\r\n  const sql = 'CALL ajouter_participant(?, ?)';\r\n\r\n  db.query(sql, [id_session, id_user], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de l’ajout du participant :', err.message);\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.json({ message: 'Participant ajouté avec succès' });\r\n  });\r\n});\r\n\r\n\r\napp.post('/sessions/leave', (req, res) => {\r\n  const { id_session, id_user } = req.body\r\n  if (!id_session || !id_user) {\r\n    return res.status(400).json({ error: 'id_session et id_user requis' })\r\n  }\r\n  // Suppression directe du participant\r\n  db.query(\r\n    'DELETE FROM participate WHERE id_session = ? AND id_user = ?',\r\n    [id_session, id_user],\r\n    (err, result) => {\r\n      if (err) {\r\n        console.error('leave error:', err.message)\r\n        return res.status(500).json({ error: err.message })\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        return res.status(404).json({ error: 'Participation non trouvée' })\r\n      }\r\n      res.json({ message: 'Départ de session réussi' })\r\n    }\r\n  )\r\n});\r\n\r\n  app.post('/sessions/create', (req, res) => {\r\n    const {\r\n      min_joueurs, max_joueurs, temps_jeu,\r\n      min_duree, max_duree, age_min,\r\n      jeu_id, date_debut, id_host\r\n    } = req.body;\r\n\r\n    if (!id_host || !jeu_id || !date_debut) {\r\n      return res.status(400).json({ error: 'Champs obligatoires manquants' });\r\n    }\r\n\r\n    const sql = 'CALL creer_session(?, ?, ?, ?, ?, ?, ?, ?, ?)';\r\n    const params = [\r\n      min_joueurs, max_joueurs, temps_jeu,\r\n      min_duree, max_duree, age_min,\r\n      jeu_id, date_debut, id_host\r\n    ];\r\n\r\n    db.query(sql, params, (err, results) => {\r\n      if (err) {\r\n        console.error('Erreur création session :', err.message);\r\n        return res.status(500).json({ error: 'Erreur lors de la création de la session' });\r\n      }\r\n      res.json({ message: 'Session créée avec succès' });\r\n    });\r\n  });\r\n\r\n\r\n\r\n// Modifier un jeu existant\r\napp.put('/games/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  let { name_game, year_game, thumbnail, url } = req.body;\r\n\r\n  year_game = `${year_game}-01-02`;\r\n \r\n  console.log(year_game);\r\n\r\n  const sql = `\r\n    UPDATE game\r\n    SET name_game = ?, year_game = ?, thumbnail = ?, url = ?\r\n    WHERE id_game = ?\r\n  `;\r\n\r\n  db.query(sql, [name_game, year_game, thumbnail, url, id], (err, result) => {\r\n    if (err) {\r\n      console.error('Erreur modification jeu :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: 'Jeu non trouvé' });\r\n    }\r\n    res.json({ message: 'Jeu modifié avec succès' });\r\n  });\r\n});\r\n\r\n\r\n//RECHERCHE\r\n// Endpoint pour récupérer les jeux (avec recherche)\r\napp.get('/api/games', (req, res) => {\r\n  const search = req.query.q || '';\r\n  const sql = search\r\n    ? \"SELECT id_game AS id, name_game AS name, year_game, thumbnail FROM Game WHERE name_game LIKE ?\"\r\n    : \"SELECT id_game AS id, name_game AS name, year_game, thumbnail FROM Game\";\r\n  const params = search ? [`%${search}%`] : [];\r\n  db.query(sql, params, (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({error: err});\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get('/api/search',async(req,res)=>{\r\n  const keyword = req.query.q || '';\r\n  const [rows] = await db.execute('CALL search_games(?)',[keyword]);\r\n  res.json(rows[0]);\r\n})\r\n\r\napp.get('/categories', (req, res) => {\r\n  const sql = 'SELECT * FROM Category ORDER BY type_category';\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération catégories :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get('/games/category/:id_category', (req, res) => {\r\n  const id_cat = req.params.id_category;\r\n  const sql = `\r\n    SELECT g.*\r\n    FROM Game g\r\n    JOIN have h ON g.id_game = h.id_game\r\n    WHERE h.id_category = ?\r\n  `;\r\n  db.query(sql, [id_cat], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération jeux catégorie :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n// Exemple de route\r\napp.get('/user', (req, res) => {\r\n  db.query('SELECT * FROM user', (err, results) => {\r\n    if (err) return res.status(500).json({ erreur: err.message });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('API en ligne sur http://localhost:3000');\r\n});"]}