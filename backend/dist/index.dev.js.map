{"version":3,"sources":["index.js"],"names":["express","require","cors","bcrypt","jwt","mysql","app","use","json","db","createConnection","host","user","password","database","connect","err","console","error","message","log","get","req","res","success","post","body","username","email","query","results","status","length","hash","hashedpassword","compare","password_user","valid","id_user","err2","name_user","email_user","role_user","sql","erreur","id","params","gameId","sessionsMap","Map","forEach","row","has","id_session","host_name","set","id_game","id_host","min_players","max_players","playing_time","min_playtime","max_playtime","min_age","starting_date","participants","participant_id","push","participant_name","trust_score","participant_score","sessions","Array","from","values","result","affectedRows","min_joueurs","max_joueurs","temps_jeu","min_duree","max_duree","age_min","jeu_id","date_debut","put","name_game","year_game","thumbnail","url","search","q","keyword","execute","rows","id_cat","id_category","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst mysql = require('mysql2');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Connexion à MySQL\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '123456789',\r\n  database: 'projet_bda'\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Erreur de connexion à la base de données :', err.message);\r\n  } else {\r\n    console.log('Connecté à la base de données MySQL');\r\n  }\r\n});\r\n\r\n// Route de base\r\napp.get('/', (req, res) => {\r\n  res.json({ success: true, message: 'Bienvenue sur l’API' });\r\n});\r\n\r\n\r\n// ROUTE LOGIN ETC\r\n\r\napp.post('/register',async(req,res)=>{\r\n  try{\r\n    const { username,email,password} =req.body;\r\n\r\n    db.query('Select * FROM user WHERE email_user = ?',[email],async(err,results)=>{\r\n      if(err) return res.status(500).json({error:err.message});\r\n\r\n      if(results.length >0){\r\n        return res.status(400).json({error:'Cet email est déja utilisé'});\r\n      }\r\n\r\n      const hashedpassword = await bcrypt.hash(password,10);\r\n\r\n      db.query(\r\n        'INSERT INTO user (name_user,email_user,password_user,is_online,role_user) VALUES (?,?,?,?,?)',\r\n        [username,email,hashedpassword,0,\"user\"],\r\n        (err,results) =>{\r\n          if(err) return res.status(500).json({error: err.message});\r\n          res.status(201).json({message:'Compte créé avec succès'})\r\n        }\r\n      );\r\n    });\r\n\r\n  }catch(error){\r\n    res.status(500).json({error:'Erreur lors de la création du compte'})\r\n  }\r\n});\r\n\r\n\r\napp.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Veuillez fournir email et mot de passe.' });\r\n  }\r\n\r\n  db.query('SELECT * FROM user WHERE email_user = ?', [email], async (err, results) => {\r\n    if (err) return res.status(500).json({ error: err.message });\r\n    if (results.length === 0) {\r\n      return res.status(401).json({ error: 'Email ou mot de passe incorrect' });\r\n    }\r\n\r\n    const user = results[0];\r\n\r\n    const valid = await bcrypt.compare(password, user.password_user);\r\n    if (!valid) {\r\n      return res.status(401).json({ error: 'Email ou mot de passe incorrect' });\r\n    }\r\n\r\n    // Mettre à jour is_online\r\n    db.query('UPDATE user SET is_online = 1 WHERE id_user = ?', [user.id_user], (err2) => {\r\n      if (err2) return res.status(500).json({ error: err2.message });\r\n\r\n      res.json({\r\n        message: 'Connexion réussie',\r\n        user: {\r\n          id_user: user.id_user,\r\n          name_user: user.name_user,\r\n          email_user: user.email_user,\r\n          role_user: user.role_user  // <-- ici on ajoute le rôle\r\n        }\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n\r\n// Route sécurisée admin pour récupérer tous les utilisateurs depuis la vue admin_user_view\r\napp.get('/admin/users', (req, res) => {\r\n  // Ici tu peux ajouter une vérification de token/session si tu en utilises\r\n\r\n  const sql = 'SELECT * FROM admin_user_view ORDER BY name_user';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération utilisateurs :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n\r\n\r\n// ROUTE GAMES \r\napp.get('/games', (req, res) => {\r\n  const sql = 'SELECT * FROM game';\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de la récupération des jeux :', err.message);\r\n      return res.status(500).json({ erreur: 'Erreur serveur' });\r\n    }\r\n    res.json(results); // envoie tous les jeux au front\r\n  });\r\n});\r\n\r\napp.get('/game/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  const sql = `\r\n    SELECT\r\n      g.id_game,\r\n      g.name_game,\r\n      g.thumbnail   AS image_url,\r\n      g.url         AS website,\r\n      g.year_game   AS release_date,\r\n      g.is_available,\r\n      g.rank_game,\r\n      g.total_ratings,\r\n      gd.description_game   AS description,\r\n      gd.game_publisher     AS publisher,\r\n      GROUP_CONCAT(DISTINCT c.type_category SEPARATOR ',') AS categories\r\n    FROM Game g\r\n    LEFT JOIN Game_details gd ON g.id_game = gd.id_game\r\n    LEFT JOIN have h         ON g.id_game = h.id_game\r\n    LEFT JOIN Category c     ON h.id_category = c.id_category\r\n    WHERE g.id_game = ?\r\n    GROUP BY\r\n      g.id_game,\r\n      gd.description_game,\r\n      gd.game_publisher\r\n  `;\r\n\r\n  db.query(sql, [id], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur chargement jeu:', err.message);\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    if (results.length === 0) {\r\n      return res.status(404).json({ error: 'Jeu non trouvé' });\r\n    }\r\n    // On renvoie l’objet jeu complet\r\n    res.json(results[0]);\r\n  });\r\n});\r\n\r\napp.get('/sessions/game/:id', (req, res) => {\r\n  console.log(\"Hehe\");\r\n  const gameId = req.params.id;\r\n  const sql = `\r\n    SELECT \r\n      s.id_session,\r\n      s.id_game,\r\n      s.id_host,\r\n      s.min_players,\r\n      s.max_players,\r\n      s.playing_time,\r\n      s.min_playtime,\r\n      s.max_playtime,\r\n      s.min_age,\r\n      s.starting_date,\r\n      u_host.name_user AS host_name,\r\n      u_part.id_user AS participant_id,\r\n      u_part.name_user AS participant_name,\r\n      u_part.trust_score AS participant_score\r\n    FROM Session s\r\n    JOIN User u_host ON s.id_host = u_host.id_user\r\n    LEFT JOIN participate p ON s.id_session = p.id_session\r\n    LEFT JOIN User u_part ON p.id_user = u_part.id_user\r\n    WHERE s.id_game = ?\r\n    ORDER BY s.id_session;\r\n  `;\r\n\r\n  db.query(sql, [gameId], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de la récupération des sessions :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n\r\n    // Regrouper les résultats par session\r\n    const sessionsMap = new Map();\r\n\r\n    results.forEach(row => {\r\n      if (!sessionsMap.has(row.id_session)) {\r\n        console.log(\"Host Name : \",row.host_name);\r\n        sessionsMap.set(row.id_session, {\r\n          id_session: row.id_session,\r\n          id_game: row.id_game,\r\n          id_host: row.id_host,\r\n          host_name: row.host_name,\r\n          min_players: row.min_players,\r\n          max_players: row.max_players,\r\n          playing_time: row.playing_time,\r\n          min_playtime: row.min_playtime,\r\n          max_playtime: row.max_playtime,\r\n          min_age: row.min_age,\r\n          starting_date: row.starting_date,\r\n          participants: []\r\n        });\r\n      }\r\n      if (row.participant_id) {\r\n        sessionsMap.get(row.id_session).participants.push({\r\n          id_user: row.participant_id,\r\n          name_user: row.participant_name,\r\n          trust_score: row.participant_score\r\n        });\r\n      }\r\n    });\r\n\r\n    // Convertir map en tableau\r\n    const sessions = Array.from(sessionsMap.values());\r\n\r\n    res.json(sessions);\r\n  });\r\n});\r\n\r\napp.post('/sessions/join', (req, res) => {\r\n  const { id_session, id_user } = req.body;\r\n\r\n  if (!id_session || !id_user) {\r\n    return res.status(400).json({ error: 'id_session et id_user sont requis' });\r\n  }\r\n\r\n  const sql = 'CALL ajouter_participant(?, ?)';\r\n\r\n  db.query(sql, [id_session, id_user], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur lors de l’ajout du participant :', err.message);\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n    res.json({ message: 'Participant ajouté avec succès' });\r\n  });\r\n});\r\n\r\n\r\napp.post('/sessions/leave', (req, res) => {\r\n  const { id_session, id_user } = req.body\r\n  if (!id_session || !id_user) {\r\n    return res.status(400).json({ error: 'id_session et id_user requis' })\r\n  }\r\n  // Suppression directe du participant\r\n  db.query(\r\n    'DELETE FROM participate WHERE id_session = ? AND id_user = ?',\r\n    [id_session, id_user],\r\n    (err, result) => {\r\n      if (err) {\r\n        console.error('leave error:', err.message)\r\n        return res.status(500).json({ error: err.message })\r\n      }\r\n      if (result.affectedRows === 0) {\r\n        return res.status(404).json({ error: 'Participation non trouvée' })\r\n      }\r\n      res.json({ message: 'Départ de session réussi' })\r\n    }\r\n  )\r\n});\r\n\r\n  app.post('/sessions/create', (req, res) => {\r\n    const {\r\n      min_joueurs, max_joueurs, temps_jeu,\r\n      min_duree, max_duree, age_min,\r\n      jeu_id, date_debut, id_host\r\n    } = req.body;\r\n\r\n    if (!id_host || !jeu_id || !date_debut) {\r\n      return res.status(400).json({ error: 'Champs obligatoires manquants' });\r\n    }\r\n\r\n    const sql = 'CALL creer_session(?, ?, ?, ?, ?, ?, ?, ?, ?)';\r\n    const params = [\r\n      min_joueurs, max_joueurs, temps_jeu,\r\n      min_duree, max_duree, age_min,\r\n      jeu_id, date_debut, id_host\r\n    ];\r\n\r\n    db.query(sql, params, (err, results) => {\r\n      if (err) {\r\n        console.error('Erreur création session :', err.message);\r\n        return res.status(500).json({ error: 'Erreur lors de la création de la session' });\r\n      }\r\n      res.json({ message: 'Session créée avec succès' });\r\n    });\r\n  });\r\n\r\n\r\n\r\n// Modifier un jeu existant\r\napp.put('/games/:id', (req, res) => {\r\n  const id = req.params.id;\r\n  let { name_game, year_game, thumbnail, url } = req.body;\r\n\r\n  year_game = `${year_game}-01-02`;\r\n \r\n  console.log(year_game);\r\n\r\n  const sql = `\r\n    UPDATE game\r\n    SET name_game = ?, year_game = ?, thumbnail = ?, url = ?\r\n    WHERE id_game = ?\r\n  `;\r\n\r\n  db.query(sql, [name_game, year_game, thumbnail, url, id], (err, result) => {\r\n    if (err) {\r\n      console.error('Erreur modification jeu :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ error: 'Jeu non trouvé' });\r\n    }\r\n    res.json({ message: 'Jeu modifié avec succès' });\r\n  });\r\n});\r\n\r\n\r\n//RECHERCHE\r\n// Endpoint pour récupérer les jeux (avec recherche)\r\napp.get('/api/games', (req, res) => {\r\n  const search = req.query.q || '';\r\n  const sql = search\r\n    ? \"SELECT id_game AS id, name_game AS name, year_game, thumbnail FROM Game WHERE name_game LIKE ?\"\r\n    : \"SELECT id_game AS id, name_game AS name, year_game, thumbnail FROM Game\";\r\n  const params = search ? [`%${search}%`] : [];\r\n  db.query(sql, params, (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({error: err});\r\n      return;\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get('/api/search',async(req,res)=>{\r\n  const keyword = req.query.q || '';\r\n  const [rows] = await db.execute('CALL search_games(?)',[keyword]);\r\n  res.json(rows[0]);\r\n})\r\n\r\napp.get('/categories', (req, res) => {\r\n  const sql = 'SELECT * FROM Category ORDER BY type_category';\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération catégories :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.get('/games/category/:id_category', (req, res) => {\r\n  const id_cat = req.params.id_category;\r\n  const sql = `\r\n    SELECT g.*\r\n    FROM Game g\r\n    JOIN have h ON g.id_game = h.id_game\r\n    WHERE h.id_category = ?\r\n  `;\r\n  db.query(sql, [id_cat], (err, results) => {\r\n    if (err) {\r\n      console.error('Erreur récupération jeux catégorie :', err.message);\r\n      return res.status(500).json({ error: 'Erreur serveur' });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n// Exemple de route\r\napp.get('/user', (req, res) => {\r\n  db.query('SELECT * FROM user', (err, results) => {\r\n    if (err) return res.status(500).json({ erreur: err.message });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('API en ligne sur http://localhost:3000');\r\n});"],"file":"index.dev.js"}